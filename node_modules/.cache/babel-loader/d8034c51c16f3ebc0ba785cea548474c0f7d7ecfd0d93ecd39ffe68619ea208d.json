{"ast":null,"code":"import { config } from \"../config.d\";\nexport function defineNavBarLimits(postPageCount, maxPagesCount) {\n  const halfNavBarPageButtonsCount = Math.floor(config.maxNavBarPageButtonsCount / 2);\n  const navBarLimits = {\n    min: +postPageCount - halfNavBarPageButtonsCount - 1,\n    max: +postPageCount + halfNavBarPageButtonsCount\n  };\n  if (+postPageCount - halfNavBarPageButtonsCount <= 0) {\n    navBarLimits.min = config.defaultNavigationMin;\n    navBarLimits.max = Math.min(navBarLimits.min + config.maxNavBarPageButtonsCount, maxPagesCount);\n    return navBarLimits;\n  }\n  if (+postPageCount + halfNavBarPageButtonsCount > maxPagesCount) {\n    navBarLimits.max = maxPagesCount;\n    navBarLimits.min = navBarLimits.max - config.maxNavBarPageButtonsCount;\n    return navBarLimits;\n  }\n  return navBarLimits;\n}","map":{"version":3,"names":["config","defineNavBarLimits","postPageCount","maxPagesCount","halfNavBarPageButtonsCount","Math","floor","maxNavBarPageButtonsCount","navBarLimits","min","max","defaultNavigationMin"],"sources":["/home/lino/Documents/projects/business-sector-test-task/src/lib/defineNavBarLimits.ts"],"sourcesContent":["import { config } from \"../config.d\";\n\ninterface IResult {\n  min: number;\n  max: number;\n}\n\nexport function defineNavBarLimits(postPageCount: number, maxPagesCount: number): IResult {\n  const halfNavBarPageButtonsCount = Math.floor(config.maxNavBarPageButtonsCount / 2);\n  const navBarLimits = {\n    min: +postPageCount - halfNavBarPageButtonsCount - 1,\n    max: +postPageCount + halfNavBarPageButtonsCount\n  }\n\n  if (+postPageCount - halfNavBarPageButtonsCount <= 0) {\n    navBarLimits.min = config.defaultNavigationMin;\n    navBarLimits.max = Math.min(navBarLimits.min + config.maxNavBarPageButtonsCount, maxPagesCount);\n    return navBarLimits;\n  }\n  if (+postPageCount + halfNavBarPageButtonsCount > maxPagesCount) {\n    navBarLimits.max = maxPagesCount;\n    navBarLimits.min = navBarLimits.max - config.maxNavBarPageButtonsCount;\n    return navBarLimits;\n  }\n\n  return navBarLimits;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AAOpC,OAAO,SAASC,kBAAkBA,CAACC,aAAqB,EAAEC,aAAqB,EAAW;EACxF,MAAMC,0BAA0B,GAAGC,IAAI,CAACC,KAAK,CAACN,MAAM,CAACO,yBAAyB,GAAG,CAAC,CAAC;EACnF,MAAMC,YAAY,GAAG;IACnBC,GAAG,EAAE,CAACP,aAAa,GAAGE,0BAA0B,GAAG,CAAC;IACpDM,GAAG,EAAE,CAACR,aAAa,GAAGE;EACxB,CAAC;EAED,IAAI,CAACF,aAAa,GAAGE,0BAA0B,IAAI,CAAC,EAAE;IACpDI,YAAY,CAACC,GAAG,GAAGT,MAAM,CAACW,oBAAoB;IAC9CH,YAAY,CAACE,GAAG,GAAGL,IAAI,CAACI,GAAG,CAACD,YAAY,CAACC,GAAG,GAAGT,MAAM,CAACO,yBAAyB,EAAEJ,aAAa,CAAC;IAC/F,OAAOK,YAAY;EACrB;EACA,IAAI,CAACN,aAAa,GAAGE,0BAA0B,GAAGD,aAAa,EAAE;IAC/DK,YAAY,CAACE,GAAG,GAAGP,aAAa;IAChCK,YAAY,CAACC,GAAG,GAAGD,YAAY,CAACE,GAAG,GAAGV,MAAM,CAACO,yBAAyB;IACtE,OAAOC,YAAY;EACrB;EAEA,OAAOA,YAAY;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}