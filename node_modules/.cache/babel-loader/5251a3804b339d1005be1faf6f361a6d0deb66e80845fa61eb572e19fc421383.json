{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { useAppDispatch } from '../hooks/storeHooks';\n;\nconst initialState = {\n  posts: []\n};\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    filterPosts(state, action) {\n      const dispatch = useAppDispatch();\n      const filterBy = action.payload;\n      const filteredPosts = [];\n      state.posts.forEach(post => {\n        if (post.title.includes(filterBy) || post.body.includes(filterBy) || post.id === +filterBy) {\n          filteredPosts.push(post);\n        }\n      });\n      dispath(setPosts(filterPosts));\n    },\n    setPosts(state, action) {\n      state.posts = action.payload.length ? action.payload : [];\n    }\n  }\n});\nexport const {\n  setPosts,\n  filterPosts\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","useAppDispatch","initialState","posts","postsSlice","name","reducers","filterPosts","state","action","dispatch","filterBy","payload","filteredPosts","forEach","post","title","includes","body","id","push","dispath","setPosts","length","actions","reducer"],"sources":["/home/lino/Documents/projects/business-sector-test-task/src/store/posts.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport { useAppDispatch } from '../hooks/storeHooks';\n\nimport { IPost } from '../types';\n\nexport interface IPostsState {\n  posts: IPost[];\n};\n\nconst initialState: IPostsState = {\n  posts: [],\n};\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    filterPosts(state, action: PayloadAction<string>) {\n      const dispatch = useAppDispatch();\n      const filterBy = action.payload;\n      const filteredPosts: IPost[] = [];\n      state.posts.forEach(post => {\n        if (post.title.includes(filterBy) || post.body.includes(filterBy) || post.id === +filterBy) {\n          filteredPosts.push(post);\n        }\n      });\n\n      dispath(setPosts(filterPosts));\n    },\n    setPosts(state, action: PayloadAction<IPost[]>) {\n      state.posts = action.payload.length ? action.payload : [];\n    },\n  },\n});\n\nexport const { setPosts, filterPosts } = postsSlice.actions;\nexport default postsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,SAASC,cAAc,QAAQ,qBAAqB;AAMnD;AAED,MAAMC,YAAyB,GAAG;EAChCC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,UAAU,GAAGJ,WAAW,CAAC;EAC7BK,IAAI,EAAE,OAAO;EACbH,YAAY;EACZI,QAAQ,EAAE;IACRC,WAAWA,CAACC,KAAK,EAAEC,MAA6B,EAAE;MAChD,MAAMC,QAAQ,GAAGT,cAAc,CAAC,CAAC;MACjC,MAAMU,QAAQ,GAAGF,MAAM,CAACG,OAAO;MAC/B,MAAMC,aAAsB,GAAG,EAAE;MACjCL,KAAK,CAACL,KAAK,CAACW,OAAO,CAACC,IAAI,IAAI;QAC1B,IAAIA,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACN,QAAQ,CAAC,IAAII,IAAI,CAACG,IAAI,CAACD,QAAQ,CAACN,QAAQ,CAAC,IAAII,IAAI,CAACI,EAAE,KAAK,CAACR,QAAQ,EAAE;UAC1FE,aAAa,CAACO,IAAI,CAACL,IAAI,CAAC;QAC1B;MACF,CAAC,CAAC;MAEFM,OAAO,CAACC,QAAQ,CAACf,WAAW,CAAC,CAAC;IAChC,CAAC;IACDe,QAAQA,CAACd,KAAK,EAAEC,MAA8B,EAAE;MAC9CD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACG,OAAO,CAACW,MAAM,GAAGd,MAAM,CAACG,OAAO,GAAG,EAAE;IAC3D;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEU,QAAQ;EAAEf;AAAY,CAAC,GAAGH,UAAU,CAACoB,OAAO;AAC3D,eAAepB,UAAU,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}