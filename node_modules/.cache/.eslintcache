[{"/home/lino/Documents/projects/business-sector-test-task/src/index.tsx":"1","/home/lino/Documents/projects/business-sector-test-task/src/App.tsx":"2","/home/lino/Documents/projects/business-sector-test-task/src/components/Table.tsx":"3","/home/lino/Documents/projects/business-sector-test-task/src/hooks/storeHooks.ts":"4","/home/lino/Documents/projects/business-sector-test-task/src/store/posts.ts":"5","/home/lino/Documents/projects/business-sector-test-task/src/store/index.ts":"6","/home/lino/Documents/projects/business-sector-test-task/src/components/Post.tsx":"7","/home/lino/Documents/projects/business-sector-test-task/src/components/TableHeaderTitle.tsx":"8","/home/lino/Documents/projects/business-sector-test-task/src/components/icons/Arrow.tsx":"9","/home/lino/Documents/projects/business-sector-test-task/src/components/SearchBar.tsx":"10","/home/lino/Documents/projects/business-sector-test-task/src/components/icons/SearchIcon.tsx":"11","/home/lino/Documents/projects/business-sector-test-task/src/components/NavBar.tsx":"12","/home/lino/Documents/projects/business-sector-test-task/src/config.d.ts":"13","/home/lino/Documents/projects/business-sector-test-task/src/pages/Home.tsx":"14","/home/lino/Documents/projects/business-sector-test-task/src/store/searchString.ts":"15","/home/lino/Documents/projects/business-sector-test-task/src/lib/filterPostsBy.ts":"16","/home/lino/Documents/projects/business-sector-test-task/src/lib/sortPostsBy.ts":"17","/home/lino/Documents/projects/business-sector-test-task/src/lib/defineNavBarLimits.ts":"18"},{"size":438,"mtime":1690192441070,"results":"19","hashOfConfig":"20"},{"size":377,"mtime":1690269291887,"results":"21","hashOfConfig":"20"},{"size":2419,"mtime":1690540406701,"results":"22","hashOfConfig":"20"},{"size":306,"mtime":1690192168102,"results":"23","hashOfConfig":"20"},{"size":734,"mtime":1690456786340,"results":"24","hashOfConfig":"20"},{"size":368,"mtime":1690538948390,"results":"25","hashOfConfig":"20"},{"size":463,"mtime":1690538660470,"results":"26","hashOfConfig":"20"},{"size":1080,"mtime":1690540420037,"results":"27","hashOfConfig":"20"},{"size":453,"mtime":1690456990184,"results":"28","hashOfConfig":"20"},{"size":786,"mtime":1690538275834,"results":"29","hashOfConfig":"20"},{"size":966,"mtime":1690209441267,"results":"30","hashOfConfig":"20"},{"size":2373,"mtime":1690540827993,"results":"31","hashOfConfig":"20"},{"size":209,"mtime":1690533064023,"results":"32","hashOfConfig":"20"},{"size":1259,"mtime":1690538351334,"results":"33","hashOfConfig":"20"},{"size":555,"mtime":1690372243688,"results":"34","hashOfConfig":"20"},{"size":354,"mtime":1690540579905,"results":"35","hashOfConfig":"20"},{"size":267,"mtime":1690540444409,"results":"36","hashOfConfig":"20"},{"size":890,"mtime":1690540766157,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"5jqzd0",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/lino/Documents/projects/business-sector-test-task/src/index.tsx",[],[],[],"/home/lino/Documents/projects/business-sector-test-task/src/App.tsx",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/components/Table.tsx",["97"],[],"import { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../hooks/storeHooks';\nimport { RootState } from '../store';\nimport { IPost, KeysMatching } from '../types';\nimport { Post } from './Post';\nimport { TableHeaderTitle } from './TableHeaderTitle';\n\nimport { config } from '../config.d';\nimport { useParams } from 'react-router-dom';\nimport { filterPostsBy } from '../lib/filterPostsBy';\nimport { sortPosts } from '../store/posts';\n\n\nexport function Table() {\n  const [activeTableHeaderTitleIcon, setActiveTableHeaderTitleIcon] = useState<string>('');\n  const dispatch = useAppDispatch();\n  const [sortBy, setSortBy] = useState<string>(config.defaultSortKey);\n  const [shownPosts, setShownPosts] = useState<IPost[]>([]);\n  const [posts, searchString] = useAppSelector((state: RootState) => [state.posts.posts, state.searchString.searchString]);\n  const postPageCount = useParams().postPageCount || 0;\n  const tableHeaderKeyTitlePairs: { key: string, title: string }[] = [\n    {\n      key: 'id',\n      title: 'ID'\n    },\n    {\n      key: 'title',\n      title: 'Заголовок'\n    },\n    {\n      key: 'body',\n      title: 'Описание'\n    },\n  ];\n\n  useEffect(() => {\n    const startIdx = (+postPageCount - 1) * config.maxPostsQuantity;\n    const quantity = +postPageCount * config.maxPostsQuantity;\n\n    setShownPosts(posts\n      .filter(post => filterPostsBy(post, searchString.trim()))\n      .slice(startIdx, quantity));\n\n  }, [postPageCount, posts, searchString]);\n\n  useEffect(() => {\n    dispatch(sortPosts(sortBy as KeysMatching<IPost, string>));\n  }, [sortBy]);\n\n  return (\n    <table className=\"w-full table-fixed\">\n      <thead className='bg-[#474955] text-white w-full'>\n        <tr className='w-11/12 md:w-full'>\n          {\n            tableHeaderKeyTitlePairs.length && tableHeaderKeyTitlePairs.map((keyTitlePair, idx) => {\n              return <TableHeaderTitle\n                activeIcon={activeTableHeaderTitleIcon}\n                setActiveIcon={setActiveTableHeaderTitleIcon}\n                setSortBy={setSortBy}\n                keyTitlePair={keyTitlePair}\n                key={idx}\n              />;\n            })\n          }\n        </tr>\n      </thead>\n      <tbody>\n        {\n          shownPosts.length && shownPosts.map((post, idx) => {\n            return <Post post={post} key={idx} />\n          })\n        }\n      </tbody>\n    </table>\n  );\n}\n","/home/lino/Documents/projects/business-sector-test-task/src/hooks/storeHooks.ts",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/store/posts.ts",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/store/index.ts",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/components/Post.tsx",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/components/TableHeaderTitle.tsx",["98"],[],"import { ArrowIcon } from \"./icons/Arrow\";\nimport { config } from \"../config.d\";\nimport { useEffect, useState } from \"react\";\n\ninterface IProps {\n  keyTitlePair: { key: string, title: string };\n  setSortBy: React.Dispatch<React.SetStateAction<string>>;\n  activeIcon: string;\n  setActiveIcon: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport function TableHeaderTitle({ keyTitlePair, setSortBy, activeIcon, setActiveIcon }: IProps) {\n  const { key, title } = keyTitlePair;\n  const [rotated, setRotated] = useState<boolean>(false);\n\n  useEffect(() => {\n    setRotated(key === activeIcon);\n  }, [activeIcon]);\n\n  const clickHandler = () => {\n    setActiveIcon(key);\n    setSortBy(rotated ? config.defaultSortKey : key);\n    setRotated(!rotated);\n  }\n\n  return (\n    <th onClick={clickHandler} className={`md:p-6 p-2 cursor-pointer ${title === 'ID' ? 'md:w-1/12 w-1/4' : 'w-2/5'}`} scope=\"col\">\n      <div className=\"flex items-center justify-center font-semibold\">\n        <p className=\"mr-11\">{title}</p>\n        <ArrowIcon rotated={rotated} />\n      </div>\n    </th>\n  );\n}\n","/home/lino/Documents/projects/business-sector-test-task/src/components/icons/Arrow.tsx",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/components/SearchBar.tsx",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/components/icons/SearchIcon.tsx",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/components/NavBar.tsx",["99"],[],"import { useAppSelector } from '../hooks/storeHooks';\nimport { RootState } from '../store';\nimport { config } from '../config.d';\nimport { useParams } from 'react-router-dom';\n\nimport { useEffect, useState } from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { filterPostsBy } from '../lib/filterPostsBy';\nimport { INavigationLimits, IPost } from '../types';\nimport { defineNavBarLimits } from '../lib/defineNavBarLimits';\n\ninterface IProps {\n  navigationLimits: INavigationLimits;\n  setNavigationLimits: React.Dispatch<React.SetStateAction<INavigationLimits>>;\n}\n\nexport function NavBar({ navigationLimits, setNavigationLimits }: IProps) {\n  const postPageCount = useParams().postPageCount || 0;\n  const [posts, searchString] = useAppSelector((state: RootState) => {\n    return [state.posts.posts, state.searchString.searchString]\n  });\n  const [shownPosts, setShownPosts] = useState<IPost[]>(posts);\n  const [maxPagesCount, setMaxPagesCount] = useState<number>(Math.ceil(shownPosts.length / config.maxPostsQuantity || 1));\n\n  useEffect(() => {\n    const filteredPosts = posts.filter(post => filterPostsBy(post, searchString.trim()));\n\n    setShownPosts(filteredPosts);\n    setMaxPagesCount(Math.ceil(filteredPosts.length / config.maxPostsQuantity || 1));\n  }, [posts, searchString]);\n\n  useEffect(() => {\n    setNavigationLimits(defineNavBarLimits(+postPageCount, maxPagesCount));\n  }, [postPageCount, shownPosts]);\n\n  return (\n    <div className='flex items-center justify-between w-11/12 mx-auto py-4 px-4'>\n      <Link to={'/' + Math.max((+postPageCount - 1), 1)} className='text-3xl font-semibold'>Назад</Link>\n      <div className='flex items-center justify-center'>\n        {\n          Array(maxPagesCount)\n            .fill(0)\n            .map((_, idx) => idx + 1)\n            .slice(navigationLimits.min, navigationLimits.max)\n            .map(pageCount => {\n              return (\n                <Link\n                  key={pageCount}\n                  className={`mr-4 font-bold italic text-lg color-${pageCount === +postPageCount ? \"green\" : \"gray\"}`}\n                  to={'/' + pageCount}>\n                  {pageCount}\n                </Link>\n              );\n            })\n        }\n      </div>\n      <Link to={'/' + Math.min((+postPageCount + 1), maxPagesCount)} className='text-3xl font-semibold'>Далее</Link>\n    </div>\n  );\n}\n","/home/lino/Documents/projects/business-sector-test-task/src/config.d.ts",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/pages/Home.tsx",["100"],[],"import { useEffect, useState } from 'react';\n\nimport { Table } from \"../components/Table\";\nimport { SearchBar } from '../components/SearchBar';\nimport { NavBar } from '../components/NavBar';\n\nimport { useAppDispatch } from '../hooks/storeHooks';\n\nimport { setPosts } from '../store/posts';\n\nimport { sortPostsBy } from '../lib/sortPostsBy';\n\nimport { config } from '../config.d';\n\nimport { INavigationLimits, IPost, KeysMatching } from '../types';\n\nexport function Home() {\n  const dispatch = useAppDispatch();\n  const [navigationLimits, setNavigationLimits] = useState<INavigationLimits>({\n    min: config.defaultNavigationMin,\n    max: config.defaultNavigationMax\n  });\n\n  useEffect(() => {\n    try {\n      fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(data => data.json())\n        .then(posts => {\n          if (posts.length) {\n            dispatch(setPosts(sortPostsBy(posts, config.defaultSortKey as KeysMatching<IPost, string>)));\n          }\n        });\n    } catch (e) {\n      console.error(e);\n    }\n  }, []);\n\n  return (\n    <div className='w-full md:p-0 md:w-11/12 mx-auto p-2'>\n      <SearchBar />\n      <Table />\n      <NavBar navigationLimits={navigationLimits} setNavigationLimits={setNavigationLimits} />\n    </div>\n  );\n}\n","/home/lino/Documents/projects/business-sector-test-task/src/store/searchString.ts",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/lib/filterPostsBy.ts",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/lib/sortPostsBy.ts",[],[],"/home/lino/Documents/projects/business-sector-test-task/src/lib/defineNavBarLimits.ts",[],[],{"ruleId":"101","severity":1,"message":"102","line":48,"column":6,"nodeType":"103","endLine":48,"endColumn":14,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":18,"column":6,"nodeType":"103","endLine":18,"endColumn":18,"suggestions":"106"},{"ruleId":"101","severity":1,"message":"107","line":35,"column":6,"nodeType":"103","endLine":35,"endColumn":33,"suggestions":"108"},{"ruleId":"101","severity":1,"message":"102","line":36,"column":6,"nodeType":"103","endLine":36,"endColumn":8,"suggestions":"109"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["110"],"React Hook useEffect has a missing dependency: 'key'. Either include it or remove the dependency array.",["111"],"React Hook useEffect has missing dependencies: 'maxPagesCount' and 'setNavigationLimits'. Either include them or remove the dependency array. If 'setNavigationLimits' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["112"],["113"],{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [dispatch, sortBy]",{"range":"122","text":"123"},"Update the dependencies array to be: [activeIcon, key]",{"range":"124","text":"125"},"Update the dependencies array to be: [maxPagesCount, postPageCount, setNavigationLimits, shownPosts]",{"range":"126","text":"127"},"Update the dependencies array to be: [dispatch]",{"range":"128","text":"129"},[1589,1597],"[dispatch, sortBy]",[599,611],"[activeIcon, key]",[1400,1427],"[maxPagesCount, postPageCount, setNavigationLimits, shownPosts]",[1034,1036],"[dispatch]"]